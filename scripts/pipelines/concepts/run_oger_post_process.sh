#!/bin/sh

PROJECT=$1
COLLECTION=$2
STAGE_LOCATION=$3
TMP_LOCATION=$4
BUCKET=$5
TEXT_PIPELINE_KEY=$6
TEXT_PIPELINE_VERSION=$7
AUGMENTED_TEXT_PIPELINE_KEY=$8
AUGMENTED_TEXT_PIPELINE_VERSION=$9
OGER_PIPELINE_VERSION=${10} # needed for the PP1 run as we pull in the CS, CIMIN, and CIMAX OGER files
OGER_PP_PIPELINE_VERSION=${11} # needed for the PP2 run as we pull in the CONCEPT_OGER_PP1 file
TARGET_PROCESSING_STATUS_FLAG=${12}
JAR_VERSION=${13}
OUTPUT_PIPELINE_VERSION=${14}


JOB_NAME=$(echo "OGER-POST-PROCESS-${TARGET_PROCESSING_STATUS_FLAG}-${COLLECTION}" | tr '_' '-')

if [ $TARGET_PROCESSING_STATUS_FLAG == 'OGER_PP1_DONE' ]
then
  INPUT_DOC_CRITERIA="TEXT|TEXT|${TEXT_PIPELINE_KEY}|${TEXT_PIPELINE_VERSION};AUGMENTED_TEXT|TEXT|${AUGMENTED_TEXT_PIPELINE_KEY}|${AUGMENTED_TEXT_PIPELINE_VERSION};CONCEPT_CIMAX|BIONLP|OGER|${OGER_PIPELINE_VERSION};CONCEPT_CIMIN|BIONLP|OGER|${OGER_PIPELINE_VERSION};CONCEPT_CS|BIONLP|OGER|${OGER_PIPELINE_VERSION}"
  ID_TO_OGER_DICT_ENTRY_MAP_FILE_PATH="${BUCKET}/ontology-resources/idToDictEntryMap.part1.tsv.gz"
else
  INPUT_DOC_CRITERIA="TEXT|TEXT|${TEXT_PIPELINE_KEY}|${TEXT_PIPELINE_VERSION};AUGMENTED_TEXT|TEXT|${AUGMENTED_TEXT_PIPELINE_KEY}|${AUGMENTED_TEXT_PIPELINE_VERSION};CONCEPT_OGER_PP1|BIONLP|OGER_POST_PROCESS|${OGER_PP_PIPELINE_VERSION}"
  ID_TO_OGER_DICT_ENTRY_MAP_FILE_PATH="${BUCKET}/ontology-resources/idToDictEntryMap.part2.tsv.gz"
fi

echo "COLLECTION: $COLLECTION"
echo "PROJECT: $PROJECT"
echo "JOB_NAME: $JOB_NAME"
echo "INPUT_DOC_CRITERIA: $INPUT_DOC_CRITERIA"
echo "TARGET_PROCESSING_STATUS_FLAG: $TARGET_PROCESSING_STATUS_FLAG"

REQUIRED_FLAGS='TEXT_DONE'

java -Dfile.encoding=UTF-8 -jar "target/tm-pipelines-bundled-${JAR_VERSION}.jar" OGER_POST_PROCESS \
--jobName="$JOB_NAME" \
--inputDocumentCriteria="$INPUT_DOC_CRITERIA" \
--targetProcessingStatusFlag="$TARGET_PROCESSING_STATUS_FLAG" \
--requiredProcessingStatusFlags="$REQUIRED_FLAGS" \
--idToOgerDictEntryMapFilePath="$ID_TO_OGER_DICT_ENTRY_MAP_FILE_PATH" \
--idToOgerDictEntryMapFileDelimiter='TAB' \
--collection="$COLLECTION" \
--outputPipelineVersion="$OUTPUT_PIPELINE_VERSION" \
--overwrite='YES' \
--project="${PROJECT}" \
--stagingLocation="$STAGE_LOCATION" \
--gcpTempLocation="$TMP_LOCATION" \
--workerZone=us-central1-c \
--region=us-central1 \
--numWorkers=10 \
--maxNumWorkers=75 \
--autoscalingAlgorithm=THROUGHPUT_BASED \
--workerMachineType=n1-highmem-2 \
--runner=DataflowRunner
