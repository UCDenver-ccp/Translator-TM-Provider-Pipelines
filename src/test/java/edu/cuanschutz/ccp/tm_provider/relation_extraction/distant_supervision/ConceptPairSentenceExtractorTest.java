package edu.cuanschutz.ccp.tm_provider.relation_extraction.distant_supervision;

import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Test;

import edu.cuanschutz.ccp.tm_provider.etl.util.BiolinkConstants.BiolinkAssociation;
import edu.cuanschutz.ccp.tm_provider.relation_extraction.distant_supervision.ConceptPairsFileParser.ConceptPair;
import edu.ucdenver.ccp.file.conversion.TextDocument;
import edu.ucdenver.ccp.nlp.core.annotation.TextAnnotation;
import edu.ucdenver.ccp.nlp.core.annotation.TextAnnotationFactory;

public class ConceptPairSentenceExtractorTest {

	@Test
	public void testBuildConceptPairQuery1() throws IOException {
		String subjectCurie = "MONDO:12345";
		String objectCurie = "HP:12345";
		String predicateBiolink = "biolink:has_phenotype";

		ConceptPair conceptPair = new ConceptPair(subjectCurie, objectCurie, predicateBiolink);
		String query = ConceptPairSentenceExtractor.buildConceptPairQuery(conceptPair);

		// @formatter:off
				String expectedSentenceQuery = "{\n" + 
						"		\"bool\": {\n" + 
						"			\"must\": [\n" + 
						"				{\n" + 
						"					\"match\": {\n" + 
						"						\"annotatedText\": {\n" + 
						"							\"query\": \"HP_12345\"\n" + 
						"						}\n" + 
						"					}\n" + 
						"				},\n" + 
						"				{\n" + 
						"					\"match\": {\n" + 
						"						\"annotatedText\": {\n" + 
						"							\"query\": \"MONDO_12345\"\n" + 
						"						}\n" + 
						"					}\n" + 
						"				}\n" + 
						"			]\n" + 
						"		}\n" + 
						"}";
				// @formatter:on

		// the leading whitespace is different (indented in expectedSentenceQuery, but
		// not in the autogenerated version so we remove whitespace before making the
		// comparison.
		assertEquals(expectedSentenceQuery.replaceAll("\\s", ""), query.replaceAll("\\s", ""));

	}

	@Test
	public void testBuildConceptPairQuery2() throws IOException {
		String subjectCurie = "MONDO:12345";
		Set<String> objectCuries = new HashSet<String>(Arrays.asList("HP:12345", "HP:7890"));
		String predicateBiolink = "biolink:has_phenotype";

		ConceptPair conceptPair = new ConceptPair(subjectCurie, objectCuries, predicateBiolink);
		String query = ConceptPairSentenceExtractor.buildConceptPairQuery(conceptPair);

		// @formatter:off
				String expectedSentenceQuery = "{\n" + 
						"		\"bool\": {\n" + 
						"			\"must\": [\n" + 
						"				{\n" + 
						"					\"match\": {\n" + 
						"						\"annotatedText\": {\n" + 
						"							\"query\": \"HP_12345 HP_7890\",\n" + 
						"							\"operator\": \"or\"\n" + 
						"						}\n" + 
						"					}\n" + 
						"				},\n" + 
						"				{\n" + 
						"					\"match\": {\n" + 
						"						\"annotatedText\": {\n" + 
						"							\"query\": \"MONDO_12345\"\n" + 
						"						}\n" + 
						"					}\n" + 
						"				}\n" + 
						"			]\n" + 
						"		}\n" + 
						"}";
				// @formatter:on

		// the leading whitespace is different (indented in expectedSentenceQuery, but
		// not in the autogenerated version so we remove whitespace before making the
		// comparison.
		assertEquals(expectedSentenceQuery.replaceAll("\\s", ""), query.replaceAll("\\s", ""));

	}

	/*
	 * 9acf8a692e88b8046a8b021115f9359efb509123 In the @COMPONENT$, CARF interacts
	 * with @GENE$ and enhances its function. biolink:located_in nucleoplasm p53
	 */
	@Test
	public void testGetBertTrainingLines() {

		BiolinkAssociation association = BiolinkAssociation.BL_GENE_TO_CELLULAR_COMPONENT;

		String p53Curie = "PR:12345";
		String carfCurie = "PR:23345";
		String nucleoplasmCurie = "GO:78901";
		String relationCurie = "biolink:located_in";
		ConceptPair cp = new ConceptPair(p53Curie, nucleoplasmCurie, relationCurie);
		String pmid = "PMID:5678";
		// 1 2 3 4 5 6 7
		// 01234567890123456789012345678901234567890123456789012345678901234567890123456789
		String documentText = "In the nucleoplasm, CARF interacts with p53 and enhances its function.";
		TextDocument td = new TextDocument(pmid, "PubMed", documentText);

		TextAnnotationFactory factory = TextAnnotationFactory.createFactoryWithDefaults(pmid);
		TextAnnotation nucleoplasmAnnot = factory.createAnnotation(7, 18, "nucleoplasm", nucleoplasmCurie);
		TextAnnotation p53Annot = factory.createAnnotation(40, 43, "p53", p53Curie);
		TextAnnotation carfAnnot = factory.createAnnotation(20, 24, "CARF", carfCurie);

		td.addAnnotation(nucleoplasmAnnot);
		td.addAnnotation(carfAnnot);
		td.addAnnotation(p53Annot);

		Set<String> conceptIdsToExclude = Collections.emptySet();
		List<String> bertTrainingLines = ConceptPairsSentenceExtractorMain.getBertTrainingLines(td, cp, association,
				conceptIdsToExclude);

		for (String l : bertTrainingLines) {
			System.out.println("OBSERVED: " + l);
		}

		List<String> expectedBertTrainingLines = Arrays.asList(String.format(
				"9acf8a692e88b8046a8b021115f9359efb509123\tIn the @COMPONENT$, CARF interacts with @GENE$ and enhances its function.\tbiolink:located_in\tnucleoplasm-- %s\tp53-- %s",
				nucleoplasmCurie, p53Curie));

		assertEquals(expectedBertTrainingLines, bertTrainingLines);

	}

}
